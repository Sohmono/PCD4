/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package deblurring.wiener1;

import java.awt.Image;
import java.awt.image.BufferedImage;
import java.awt.image.WritableRaster;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author LENOVO
 */
public class WienerFrame extends javax.swing.JFrame {

    //private JLabel imageLbl;
    private BufferedImage bi;
    private Image img;
    private Image processedImg;
    private BufferedImage processedImage;
    /**
     * Creates new form WiewrFrame
     */
    public WienerFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        inputBtn = new javax.swing.JToggleButton();
        wienerBtn = new javax.swing.JToggleButton();
        imageLbl = new javax.swing.JLabel();
        wienerLbl = new javax.swing.JLabel();
        saveBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBounds(new java.awt.Rectangle(0, 0, 0, 0));

        inputBtn.setText("Input Gambar");
        inputBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputBtnActionPerformed(evt);
            }
        });

        wienerBtn.setText("Deblurr");
        wienerBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                wienerBtnActionPerformed(evt);
            }
        });

        imageLbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        imageLbl.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));

        wienerLbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        wienerLbl.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));

        saveBtn.setText("Save");
        saveBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(imageLbl, javax.swing.GroupLayout.DEFAULT_SIZE, 500, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(wienerLbl, javax.swing.GroupLayout.DEFAULT_SIZE, 500, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(130, 130, 130)
                .addComponent(inputBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(saveBtn)
                .addGap(57, 57, 57)
                .addComponent(wienerBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(126, 126, 126))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(imageLbl, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
                    .addComponent(wienerLbl, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE))
                .addGap(72, 72, 72)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(inputBtn)
                    .addComponent(wienerBtn)
                    .addComponent(saveBtn))
                .addContainerGap(27, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void inputBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputBtnActionPerformed
        // TODO add your handling code here:
        JFileChooser chooser = new JFileChooser();
        chooser.showOpenDialog(this);
        File f = chooser.getSelectedFile();
        String path = f.getAbsolutePath();
        try {
            bi =ImageIO.read(new File(path));
            int widthN = bi.getWidth();
            int heightN = bi.getHeight();
            
            if (widthN >=500 && widthN<1500|| heightN >=1000 && heightN<2000){
                int scalingWidth = widthN/2;
                int scalingHeight= heightN/2;
                img = bi.getScaledInstance(scalingWidth, scalingHeight, Image.SCALE_SMOOTH);
            } 
            else if(widthN > 1500  || heightN > 2000 ){
                int scalingWidth = widthN/10;
                int scalingHeight= heightN/10;
                img = bi.getScaledInstance(scalingWidth, scalingHeight, Image.SCALE_SMOOTH);
            }
            else{
                img = bi.getScaledInstance(widthN, heightN, Image.SCALE_SMOOTH);
            }
            ImageIcon icon = new ImageIcon(img);
            imageLbl.setIcon(icon);
        } catch (IOException ex) {
            Logger.getLogger(WienerFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_inputBtnActionPerformed

    private void wienerBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_wienerBtnActionPerformed
        // TODO add your handling code here:if
        if (bi != null) {
            //ini manggil fungsi
            processedImage = applyWienerFilter(bi, 3, 20);
            int widthW = processedImage.getWidth();
            int heightW = processedImage.getHeight();
            if (widthW >=500 && widthW <1500 || heightW >=1000 && heightW <2000){
                int scalingWidth = widthW/2;
                int scalingHeight= heightW/2;
                processedImg = processedImage.getScaledInstance(scalingWidth, scalingHeight, Image.SCALE_SMOOTH);
            } 
            else if(widthW >=1500 || heightW>=2000 ){
                int scalingWidth = widthW/10;
                int scalingHeight= heightW/10;
                processedImg = processedImage.getScaledInstance(scalingWidth, scalingHeight, Image.SCALE_SMOOTH);
            }
            else{
                processedImg = processedImage.getScaledInstance(widthW, heightW, Image.SCALE_SMOOTH);
            }
            ImageIcon processedIcon = new ImageIcon(processedImg);
            wienerLbl.setIcon(processedIcon);
        } else {
            JOptionPane.showMessageDialog(this, "Please input an image first.");
        }
        
    }//GEN-LAST:event_wienerBtnActionPerformed

    private void saveBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveBtnActionPerformed
        // TODO add your handling code here:
        if (processedImage != null) {
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Save Image");
        
        // biar langsung file gambar
        fileChooser.setAcceptAllFileFilterUsed(false);
        fileChooser.addChoosableFileFilter(new FileNameExtensionFilter("PNG Image", "png"));
        fileChooser.addChoosableFileFilter(new FileNameExtensionFilter("JPEG Image", "jpg", "jpeg"));
        
        int userSelection = fileChooser.showSaveDialog(this);
        
        if (userSelection == JFileChooser.APPROVE_OPTION) {
            File fileToSave = fileChooser.getSelectedFile();
            
            // dapatin ekstensi file
            String extension = "";
            String filePath = fileToSave.getAbsolutePath();
            if (fileChooser.getFileFilter().getDescription().equals("PNG Image")) {
                extension = "png";
                if (!filePath.toLowerCase().endsWith(".png")) {
                    fileToSave = new File(filePath + ".png");
                }
            } else if (fileChooser.getFileFilter().getDescription().equals("JPEG Image")) {
                extension = "jpg";
                if (!filePath.toLowerCase().endsWith(".jpg") && !filePath.toLowerCase().endsWith(".jpeg")) {
                    fileToSave = new File(filePath + ".jpg");
                }
            }
            
            try {
                ImageIO.write(processedImage, extension, fileToSave);
                JOptionPane.showMessageDialog(this, "Image saved successfully.");
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, "Error saving image: " + ex.getMessage());
            }
        }
    } else {
        JOptionPane.showMessageDialog(this, "No image to save. Please process an image first.");
    }
    }//GEN-LAST:event_saveBtnActionPerformed

   public static BufferedImage applyWienerFilter(BufferedImage image, int windowSize, double noiseVariance) {
        int width = image.getWidth();
        int height = image.getHeight();
        BufferedImage result = new BufferedImage(width, height, image.getType());

        int halfWindowSize = windowSize / 2;
        double epsilon = 1e-5;  // batas wajar buat mencegah pembagian oleh nol

        for (int y = 0; y < height; y++) {
            for (int x = 0; x < width; x++) {
                
                // Hitung rata-rata dan varians lokal
                double localMeanR = 0, localMeanG = 0, localMeanB = 0;
                double localVarianceR = 0, localVarianceG = 0, localVarianceB = 0;
                int count = 0;

                for (int j = -halfWindowSize; j <= halfWindowSize; j++) {
                    for (int i = -halfWindowSize; i <= halfWindowSize; i++) {
                        int pixelX = Math.min(Math.max(x + i, 0), width - 1);
                        int pixelY = Math.min(Math.max(y + j, 0), height - 1);
                        int rgb = image.getRGB(pixelX, pixelY);

                        int r = (rgb >> 16) & 0xFF;
                        int g = (rgb >> 8) & 0xFF;
                        int b = rgb & 0xFF;

                        localMeanR += r;
                        localMeanG += g;
                        localMeanB += b;
                        count++;
                    }
                }

                localMeanR /= count;
                localMeanG /= count;
                localMeanB /= count;

                for (int j = -halfWindowSize; j <= halfWindowSize; j++) {
                    for (int i = -halfWindowSize; i <= halfWindowSize; i++) {
                        int pixelX = Math.min(Math.max(x + i, 0), width - 1);
                        int pixelY = Math.min(Math.max(y + j, 0), height - 1);
                        int rgb = image.getRGB(pixelX, pixelY);

                        int r = (rgb >> 16) & 0xFF;
                        int g = (rgb >> 8) & 0xFF;
                        int b = rgb & 0xFF;

                        localVarianceR += (r - localMeanR) * (r - localMeanR);
                        localVarianceG += (g - localMeanG) * (g - localMeanG);
                        localVarianceB += (b - localMeanB) * (b - localMeanB);
                    }
                }

                localVarianceR /= count;
                localVarianceG /= count;
                localVarianceB /= count;

                // Tambahkan epsilon untuk menghindari pembagian oleh nol
                localVarianceR = Math.max(localVarianceR, epsilon);
                localVarianceG = Math.max(localVarianceG, epsilon);
                localVarianceB = Math.max(localVarianceB, epsilon);

                int rgb = image.getRGB(x, y);
                int r = (rgb >> 16) & 0xFF;
                int g = (rgb >> 8) & 0xFF;
                int b = rgb & 0xFF;

                // Gunakan rumus Wiener filter yang benar
                int newR = (int) (localMeanR + ((localVarianceR - noiseVariance) / localVarianceR) * (r - localMeanR));
                int newG = (int) (localMeanG + ((localVarianceG - noiseVariance) / localVarianceG) * (g - localMeanG));
                int newB = (int) (localMeanB + ((localVarianceB - noiseVariance) / localVarianceB) * (b - localMeanB));

                newR = Math.min(Math.max(newR, 0), 255);
                newG = Math.min(Math.max(newG, 0), 255);
                newB = Math.min(Math.max(newB, 0), 255);

                int newRgb = (newR << 16) | (newG << 8) | newB;
                result.setRGB(x, y, newRgb);
            }
        }

        return result;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(WienerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(WienerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(WienerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(WienerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new WienerFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel imageLbl;
    private javax.swing.JToggleButton inputBtn;
    private javax.swing.JButton saveBtn;
    private javax.swing.JToggleButton wienerBtn;
    private javax.swing.JLabel wienerLbl;
    // End of variables declaration//GEN-END:variables
}
